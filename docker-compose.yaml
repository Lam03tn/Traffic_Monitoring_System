services:

  haproxy:
    # image: haproxy:2.8
    image: haproxy:lts-alpine3.21
    container_name: haproxy
    ports:
      - "1935:1935"  # RTMP
      - "8888:8888"  # Stats dashboard
    volumes:
      - ./data-pipeline/configs/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

    networks:
      - internal_net
      - cam_net

  rtsp_server_1:
    image: bluenviron/mediamtx:1.12.0-ffmpeg
    container_name: rtsp_server_1
    ports:
      - "1936:1935" # RTMP
      - "8554:8554"   # RTSP
      - "9997:9997"   # HTTP API + Prometheus metrics
    volumes:
      - ./data-pipeline/configs/mediamtx.yml:/mediamtx.yml
    environment:
      - MTX_LOGLEVEL=info
    networks:
      - internal_net  
  
  rtsp_server_2:
    image: bluenviron/mediamtx:1.12.0-ffmpeg
    container_name: rtsp_server_2
    ports:
      - "1937:1935" # RTMP
      - "8555:8554"   # RTSP
      - "9998:9997"   # HTTP API + Prometheus metrics
    volumes:
      - ./data-pipeline/configs/mediamtx.yml:/mediamtx.yml
    environment:
      - MTX_LOGLEVEL=info
    networks:
      - internal_net
  
  rtsp_server_3:
    image: bluenviron/mediamtx:1.12.0-ffmpeg
    container_name: rtsp_server_3
    ports:
      - "1938:1935" # RTMP
      - "8556:8554"   # RTSP
      - "9999:9997"   # HTTP API + Prometheus metrics
    volumes:
      - ./data-pipeline/configs/mediamtx.yml:/mediamtx.yml
    environment:
      - MTX_LOGLEVEL=info
    networks:
      - internal_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - internal_net

  # Kafka
  kafka1:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka1
    hostname: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    depends_on:
      - zookeeper
    networks:
      - internal_net

  kafka2:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka2
    hostname: kafka2
    ports:
      - "9093:9092"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092,PLAINTEXT_HOST://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - internal_net

  kafka3:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka3
    hostname: kafka3
    ports:
      - "9094:9092"
      - "29094:29094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092,PLAINTEXT_HOST://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - internal_net

  # Cassandra
  cassandra:
    image: cassandra:4.1.7
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_START_RPC: "true"
      CASSANDRA_CLUSTER_NAME: TrafficCluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    volumes:
      - ./database-docker/cassandra-data:/var/lib/cassandra
    networks:
      - internal_net

  cassandra-init:
    build:
      context: .
      dockerfile: Dockerfile.cassandra-init
    depends_on:
      - cassandra
    networks:
      - internal_net

  # MinIO (object storage)
  minio:
    image: minio/minio:RELEASE.2025-04-08T15-41-24Z-cpuv1
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9002:9001"
    volumes:
      - ./database-docker/minio-data:/data
    networks:
      - internal_net

  triton_server:
    image: nvcr.io/nvidia/tritonserver:24.09-py3
    container_name: triton_server
    command: tritonserver --model-repository=/models
    volumes:
      - ./AI_component/model_repository:/models
    ports:
      - "8000:8000" # HTTP
      - "8001:8001" # gRPC
      - "8002:8002" # Metrics
    environment:
      - TRITONSERVER_LOG_VERBOSE=1
    shm_size: '4g'
    ulimits:
      memlock: -1
      stack: 67108864
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    runtime: nvidia
    networks:
      - internal_net

  backend:
    image: lhn102/traffic-fastapi-backend:latest
    ports:
      - "28000:8000"  
    volumes:
      - ./web-component/backend:/app/backend  
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9092,kafka3:9092
    networks:
      - internal_net
    restart: always  

  frontend:
    image: lhn102/traffic-react-frontend:latest 
    container_name: frontend
    ports:
      - "80:80"  
    volumes:
      - ./web-component/frontend:/app/frontend  
    restart: always  
    networks:
      - internal_net
      - browser_net
  
volumes:
  minio-data:
  models:

networks:
  internal_net:
    name: internal_net
    driver: bridge
  cam_net:
    name: cam_net
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24
  browser_net:
    name: browser_net
    driver: bridge
  