version: '1.0'

services:

  haproxy:
    # image: haproxy:2.8
    image: haproxy:lts-alpine3.21
    container_name: haproxy
    ports:
      - "1935:1935"  # RTMP
      - "8888:8888"  # Stats dashboard
    volumes:
      - ./data-pipeline/configs/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      # - ./data-pipeline/haproxy/syslog.sock:/dev/log

    networks:
      - stream_net
      - cam_net

  rtsp_server_1:
    image: bluenviron/mediamtx:1.12.0-ffmpeg
    container_name: rtsp_server_1
    ports:
      - "1936:1935" # RTMP
      - "8554:8554"   # RTSP
      - "9997:9997"   # HTTP API + Prometheus metrics
    volumes:
      - ./data-pipeline/configs/mediamtx.yml:/mediamtx.yml
    environment:
      - MTX_LOGLEVEL=info
    networks:
      - stream_net  
  
  rtsp_server_2:
    image: bluenviron/mediamtx:1.12.0-ffmpeg
    container_name: rtsp_server_2
    ports:
      - "1937:1935" # RTMP
      - "8555:8554"   # RTSP
      - "9998:9997"   # HTTP API + Prometheus metrics
    volumes:
      - ./data-pipeline/configs/mediamtx.yml:/mediamtx.yml
    environment:
      - MTX_LOGLEVEL=info
    networks:
      - stream_net  
  
  rtsp_server_3:
    image: bluenviron/mediamtx:1.12.0-ffmpeg
    container_name: rtsp_server_3
    ports:
      - "1938:1935" # RTMP
      - "8556:8554"   # RTSP
      - "9999:9997"   # HTTP API + Prometheus metrics
    volumes:
      - ./data-pipeline/configs/mediamtx.yml:/mediamtx.yml
    environment:
      - MTX_LOGLEVEL=info
    networks:
      - stream_net  

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
    depends_on:
      - zookeeper

  # Cassandra
  cassandra:
    image: cassandra:4.1.7
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_START_RPC: "true"
      CASSANDRA_CLUSTER_NAME: TrafficCluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    # volumes:
    # #   - ./database-docker/cassandra-data:/var/lib/cassandra
    #   - ./database_init/cassandra_schema.cql:/cassandra_schema.cql
    #   - ./database_init/init_cassandra.sh:/init_cassandra.sh
    # entrypoint: ["/bin/bash", "/init_cassandra.sh"]
  cassandra-init:
    build:
      context: .
      dockerfile: Dockerfile.cassandra-init
    depends_on:
      - cassandra
    restart: "no"

  # MinIO (object storage)
  minio:
    image: minio/minio:RELEASE.2025-04-08T15-41-24Z-cpuv1
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9002:9001"
    volumes:
      - ./database-docker/minio-data:/data
  
  triton-cpu:
    image: nvcr.io/nvidia/tritonserver:24.09-py3
    # image: custom-triton:24.09-py3
    container_name: triton_server
    command: tritonserver --model-repository=/models
    volumes:
      - ./AI_component/model_repository:/models
    ports:
      - "8000:8000" # HTTP
      - "8001:8001" # gRPC
      - "8002:8002" # Metrics
    environment:
      - TRITONSERVER_LOG_VERBOSE=1
    shm_size: '4g'
    ulimits:
      memlock: -1
      stack: 67108864

  # triton-gpu:
  #   image: nvcr.io/nvidia/tritonserver:24.09-py3
  #   command: tritonserver --model-repository=/models
  #   volumes:
  #     - ./models:/models
  #   ports:
  #     - "8010:8000" # HTTP
  #     - "8011:8001" # gRPC
  #     - "8012:8002" # Metrics
  #   environment:
  #     - TRITONSERVER_LOG_VERBOSE=0
  #     - NVIDIA_VISIBLE_DEVICES=all
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: all
  #             capabilities: [gpu]
  #   shm_size: '1g'
  #   ulimits:
  #     memlock: -1
  #     stack: 67108864

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./database-docker/redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]  # bật AOF để lưu dữ liệu
  
volumes:
  minio-data:
  models:
  # redis_data:

networks:
  stream_net:
    driver: bridge
  cam_net:
    name: cam_net
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24